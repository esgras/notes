input("Some String")

a = 2; b = 3
if (a == 2 
	and b == 3):
	print(a, b)

and or not

A = Y if X else Z

NULL == None
TRUE == True
FALSE == False

dict.items()

for key, val in SUFFIXES.items():
	print(key, val)

type(var)

/ -- деление
// -- деление на цело
** -- возведение в степень 5 ** 2 == 25
int(), float(), str(), round(val, precission)
'{0} {1:.1f}'

str.lower() upper()

if x:
elif y:
else:

range(0, 5) -- [0, 1, 2, 3, 4] -- 5 не входит
range(5) -- [0, 1, 2, 3, 4]

def test(*params): -- неограниченное число параметров

def test():
    sum = 0
    count = 5

    return sum, count -- может вернуть несколько элементов из функции

sum, count = test()

можно обьявлять функцию в функции
переменная береться из замыкания на уровень выше

import filename -- импортировать модуль
import filename as f
from filename import function_name -- импорт в глобальное пространство имен
form filename import *

при запуске среда хранит имя выполняемого файла (модуля )
__name__ -- здесь содержиться имя выполняемого файла

если находимся в модуле то
__name__ == '__main__'

try:
except ExceptionClass:
# except ExceptionClass as ex:
finally:

arr = [1, 2, 3, 4]
arr2 = list(arr) -- клонировать массив, создаеться копия массива

отрицательный индекс - номер элеманта с конца
arr[-1] == 4

arr = [10] * 3 === [10, 10, 10] -- array_repeat

range -- не массив а функция возвращающая объект
arr = list(range(5)) -- [0, 1, 2, 3, 4]

i = 0
while i < len(arr):
    print(arr[i])
    i += 1

for i in range(len(arr)):
	print(arr[i])

len(arr) -- длина массива

append(item): добавляет элемент item в конец списка

insert(index, item): добавляет элемент item в список по индексу index

remove(item): удаляет элемент item. Удаляется только первое вхождение элемента. Если элемент не найден, генерирует исключение ValueError

clear(): удаление всех элементов из списка

index(item): возвращает индекс элемента item. Если элемент не найден, генерирует исключение ValueError

pop([index]): удаляет и возвращает элемент по индексу index. Если индекс не передан, то просто удаляет последний элемент.

count(item): возвращает количество вхождений элемента item в список

sort([key]): сортирует элементы. По умолчанию сортирует по возрастанию. Но с помощью параметра key мы можем передать функцию сортировки.

reverse(): расставляет все элементы в списке в обратном порядке

Кроме того, Python предоставляет ряд встроенных функций для работы со списками:

len(list): возвращает длину списка

sorted(list, [key]): возвращает отсортированный псисок

min(list): возвращает наименьший элемент списка

max(list): возвращает наибольший элемент списка

pop/push -- pop/append
shift -- list[0] + list[1:]
unshift -- [0] + list
count() -- len()
explode() -- arr.split()
join() -- '-'.join(list)
array_slice() - list[0:2]
range() -- range(0, 5)
array_merge() -- list1 + list2
array_splice() -- list.pop(3), list.insert(3, 100)


in_array();  -- count через колво вхождений или el in list
array_search() -- index() -- если не найден ValueError
sort() -- sort()


array_diff() -- set.difference(list2)
array_unique() -- set()

array_map() -- map(f, iterrableObject)
array_filter() -- filter(f, iterrableObject)

array_values() -- dict.values()
array_keys() -- dict.keys()

dict(dict1, **dict2) == array_merge


dict([('x', 100)]) == {'x': 100}
x = 'a'
c = {x: 100} -- {'a': 100}

for item, key in dict.items()

if el in arr:
	print(True)


число к массиву цифр
val = 1234
lst = list(str(val)) #['1', '2', '3', '4']
lst = [int(i) for i in str(val)] # [1, 2, 3, 4]

Модуль copy -- функция deepcopy
arr = copy.deepcopy(arr2)

arr2 = arr[2:] -- скопировать начинаю я элемента arr[2]
arr2 = arr[2:5] -- скопировать с arr[2] по arr[5] -- не включительно
arr2 = arr[:5] -- до arr[5] -- не включительно

strrev == str[::-1] -- начиная с 0 позиции и до последней вернуть копию с шагом 1 в обратном направлении

Кортеж -- неизменяемый массив
tup = (1, 2, 3)
tup = tuple([1, 2, 3]) 
из функции можно вернуть кортеж
def func():	
	return 5, 10

x, y = func()

Есть способ преобразовать список в словарь
arr = [
	['x', 100], ['y', 200]
]

dit = dict(arr) -- вернет хэш {'x': 100, 'y': 200}
если в элемент с ключем которого нет записать элемент то добавиться, иначе ошибка
el = dit.get(5) -- вернет элемент с ключем 5 или None
el = dit.get(5, 'SOME DEFAULT VALUE')
dict.items() -- вернет кортеж ключей и кортеж значений
dict.keys() -- список ключей
dict.values() -- список значений

if el in arr -- аналог in_array()

if el in dict1 -- аналог in_array(el, array_keys())

dit.pop(key)
dit.pop(key, defaultValue)
dit.clear()
dit.copy() -- скопировать словарь

set -- множество, список из уникальных элементов
st = {1, 2, 3, 4, 1} -- {1, 2, 3, 4}
st = set([1, 2, 3, 4, 5])

len -- применяеться для списоков, словарей, кортежей, множеств
st.remove(el) -- с ошибкой
st.discard(el) -- без ошибки
st.empty()

for el in st:
	print(el)

st.copy()
st.union(st2)
st.intersaction(st2)
st.difference(st2)
issubset
issuperset

st3 = frozenset(st2) -- множество которое нельзя менять

import os
os.path.isfile(file)
os.path.exists(path)
os.path.getsize(filename)

os.mkdir(path)

mode - r w a b

with open(file, mode) as myfile: -- автоматически закроет
	print(myfile.readline())
myfile.write('Some Text') -- записать файл
myfile.read() -- прочитать полностю файл
myfile.flush() -- моментально записать 
truncate()
seek()


write -- записываеться строка, нужно предварительно данные конвертировать к строке

open(filename, mode='r', encoding='utf8')

print(line, 100, sep="x", end="") -- в питоне в стандартные функции можно передавать аргументы с именем, тоесть здесь sep -- будет разделителем между значениями а не пойдет на печать

экранирование строки
x = 10
str = f"string is {x}" -- string is 10

str = '{} {} {}'
print(str.format(10, 20, 30)) -- вставит по порядку 10 20 30

pydoc function_name -- справка по команде

from sys import argv
x, y = argv -- здесь argv список значений полученных на вход программе

в питон по умолчанию используеться utf-8
str = '1234'
rawBytes = str.encode(encoding)
str = rawBytes.decode(encoding)

str.split(' ') -- разбить строку получить массив


arr = [1, 2, 3]
' '.join(map(str, arr)) -- объеденить в строку, сперва нужно элементы привести к строке

str_repeate == 'str' * repeatCount
S.find(str, [start],[end])
S.rfind(str, [start], [end])
S.replace(what, replacement)

' '.join(list) -- вернет строку из списка с разделителем пробел - ' '
s.strip([char])

del el[key] -- аналог unset


os.getcwd() -- текущая директория
os.path
os.isdear()
os.isfile()
os.listdir(path) -- аналог scandir
__file__
abs_path = os.path.abspath(path)
dirname = os.path.dirname(path) == __DIR__
basename = os.path.basename(path)
file = __file__
ext = os.path.splitext(path)[-1]


import glob
glob.glob('*') -- список всех файлов и директорий

import time
time.strftime('%Y-%m-%d %H:%M:%S')
time.gmtime()

Генераторы:
	список - lst = [el * 3 for el in list1]
	словарь - dct2 = {k:v*2 for k,v in dct.items()}o

import re
pattern = '^M?1$'
re.search(pattern, string)

re.findall(pattern, string)
re.sub(pattern, replace, string)
re.split(pattern, text)

search = '\[if\s+' + key + '](.*)[/endif]'
text = re.sub(search, r'\1', text) -- обратиться к корману в замене \1
re.sub(search, r'\1', text, flags=re.S | re.UNICODE) -- с использованием флагов
re.S -- точка так же обозначает новую строку


sys.exit() -- убить программу
from pprint import pprint
pprint -- удобная для форматированния замена print

если  у нас объект удобно выводить
pprint(vars(obj))

если другой тип
pprint(var)


str.lstrip(chars_string or None) -- аналоги trim
str.strip(chars_string or None)
str.rstrip(chars_string or None)

x is y -- проверяеть что x ссылаеться на тот же объект что и y

requests модуль



OOP
class Cls(self):
	count = 0


	def __init__(self):
		# constructor
		self.__name = ''

	@property
	def name(self):
		return self.__name

	@name.setter
	def name(self, name):
		self.__name = name #setter

	@staticmethod
	def add(x, y):
		return x + y

Cls.count -- статический элемент
Констант нету

isinstance(obj, Class)

super() -- обратиться к родителю из методов наследника


Статические методы
   @staticmethod -- бесполезный метод ничего не знает об контексте
   def 

   @classmethod -- получает 1-м параметром ссылку на класс, можно использовать как нормальный статический метод
   def add(cls):
   		cls.count += 1

Cls.__dict__ -- показывает перечень свойств класса
result = function(*param_arr)

hasattr(cls, 'name')

json
import json

json.loads(str) -- строку  из json в данные python
json.dumps(data) -- строку из python в json

dir() -- возвращает имена доступные в локальной области
dir(el) -- показывает атрибуты указаного объекта в алфовитном порядке
locals() -- тоже что и dir только со значениями переменных, словарь


import datetime
datetime.date() -- дата
datetime.time() -- время
datetime.datetime() -- дата время
datetime.dateime.strptime('2019-04-09', '%Y-%m-%d')
dt = datetime.datetime.now()
dt.year dt.hour

dt = datetime.datetime.strptime("22-02-11", "%d-%m-%y") #распарсить дату к дата время
%d -- день, %m -- месяц, %y -- год 2 цифры, 
%Y -- год 4 цифры, %M -- минуты, %H -- часы, %S -- секунды

dt.strftime("%Y-%m-%d") # аналог date() 2019-02-12

def func(x, *args, **kwargs):
	print(x)
	for el in args:
		print(el)
	for key, el in kwargs:
		print(f'kwargs[{key}]={el}'')

test(100, 10, 20, 30, 40, g=100, y=200, z=300, last=100) // x=10, args=[10, 20, 30, 40], kwargs={'g': 10, 'y': 200, 'z': 300, 'last': 100}


split vs rsplit
split -- разбивает строку в список, разделения идут слева
rsplit -- тоже самое разделения справа

"The string split, a Python method, for breaking strings".split(',', 1) == ["The string split", " a Python method, for breaking strings"]
"The string split, a Python method, for breaking strings".rsplit(',', 1) == ["The string split, a Python method", "for breaking strings"]

getattr(obj, field.name)

DECIMAL - ???

pip install -r req.txt -- установить пакеты из файла, после установки пакетов полезно делать freezee
pip freeze -> req.txt -- записать состояние пакетов в файл

	a, b = b, a

import random
random.randint(min, max)