Докер – средство виртуализации процессов
Важное правило – каждому процессу свой виртуальный контейнер.

Основные термины

Image (образ) – собранная подсистема, необходимая для работы процесса, сохраненная в образе.
Container (контейнер) – процесс, инициализированный на базе образа. То есть контейнер существует только когда запущен. Это как экземпляр класса, а образ это типа класс. Ну я думаю идея понятна.
Host (хост) – среда, в которой запускается докер. Проще говоря – ваша локальная машина.
Volume – это дисковое пространство между хостом и контейнером. Проще – это папка на вашей локальной машине примонтированная внутрь контейнера. Меняете тут меняется там, и наоборот, миракл.
Dockerfile – файл с набором инструкций для создания образа будущего контейнера
Service (сервис) – по сути это запущенный образ (один или несколько контейнеров), дополнительно сконфигурированный такими опциями как открытие портов, маппинг папок (volume) и прочее. Обычно это делается при помощи docker-compose.yml файла.
Docker-compose (докер-композ, чаще композер, но не путать с php composer) – тулза, облегчающая сборку и запуск системы состоящей из нескольких контейнеров, связанных между собой. 
Build (билд, билдить) – процесс создания образа из набора инструкций в докерфайле, или нескольких докерфайлов, если билд делается с помощью композера

docker ps -a -q -- список контейнеров
docker images -- список образов
docker stop $(docker ps -aq) -- остановить все контейнеры
docker rm $(docker ps -aq) -- удалить все контейнеры
docker rmi $(docker images -q) -f -- удалить все образы -f -- ключ принудительного удаления

docker build -t image1 . -- создаст образ с иминем image1

docker-compose.yml

docker info

docker run -it nickistre/ubuntu-lamp /bin/bash -- запустить образ и попасть в ssh


docker-compose up -d

docker-compose exec php php /var/www/symfony/bin/console cache:clear

docker attach container_d -- зайти внутрь контейнера -- на подобии docker run -it

docker run -d --name MyWebServer httpd -- присвоить псевдоним контейнеру

docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 1e68e7d4d155 -- найти ip container


docker-compose run 23eb120c2011 bash


docker exec -it 831676e45415 bash

69c750b6f37d
docker exec -it 69c750b6f37d bash
sudo docker exec -it 1e68e7d4d155 bash 


sudo docker rm $(sudo docker ps -aq)

sudo docker stop $(sudo docker ps -aq)

docker rmi Image Image