content - используеться в ::after, ::before для указания содержимого
attr() - функция используеться с стилях с content что бы вывести содержимое атрибута

.link::after {
	content: attr(href);
}

display: flex -- родителю
flex-wrap: wrap;
justify-content: space-between;

justify-content
	flex-start: Елементи вирівнюються по лівій стороні контейнера.
	flex-end: Елементи вирівнюються по правій стороні контейнера.
	center: Елементи вирівнюються по центру контейнера.
	space-between: Елементи буде зображено з рівними відступами поміж них.
	space-around: Елементи буде зображено з рівними відступами навколо них.

align-items:
	flex-start
	flex-end
	center
	baseline
	stretch


 flex-direction:
	row: елементи розташовані так само, як напрямок тексту.
    row-reverse: елементи розташовані протилежно напрямку тексту.
    column: елементи розташовані з гори до низу.
    column-reverse: елементи розташовані з низу до гори.

order -- порядок следования отдельного элемента, число (или отриц или 0 или положительное)
если у элемента не задан Order то он считаеться 0, order смещает относительно соседей по порядку,
 если задать выше сместит вправо до первого с большим order или до конца
 то же с ниже

align-self -- для элемента то же что и align-items -- для набора

flex-wrap -- разбивает поток на несколько частей
	nowrap -- все элементы в одну строку, при этом их ширина может уменьшаться
	wrap -- элементы переносятся
	wrap-reverse --переносятся в обратном направлении

flex-flow -- flex-direction + flex-wrap

flex-direction: row; flex-wrap: wrap;

аналогично
flex-flow: row wrap;

align-content
Це може збивати з пантелику, але align-content визначає інтервал поміж рядками, в той час як align-items визначає, як елементи буде вирівняно в контейнері в цілому. Коли у вас лише один рядок, align-content не має ніякого ефекту.

    flex-start: Рядки буде розташовано вгорі контейнеру.
    flex-end: Рядки буде розташовано внизу контейнеру.
    center: Рядки групуються вертикально по центру контейнеру.
    space-between: Рядки розташовуються з однаковими проміжками навколо них.
    space-around: Рядки розташовуються з однаковими проміжками між ними.
    stretch: Рядки розтягуються заповнюючи контейнер рівномірно.


flex-wrap: wrap-reverse;
flex-direction: column-reverse;
align-content: space-between;
justify-content: center;

flex-basis -- твечает за изначальный размер элементов до того, как они будут изменены другими свойствами Flexbox

Свойство flex-basis определяет основу флекса, которая является начальным размером элемента. Похоже на свойства width и height, к которым добавляется содержимое элемента.

flex-shrink
Устанавливает коэффициент сжатия флексов в контейнере и задаёт, насколько элемент будет уменьшаться по отношению к другим флексам, чтобы разместить все элементы в одну строку.
Краткая информация

flex-grow 
Определяет, сколько пространства может занимать флекс внутри контейнера. В качестве значения принимаются числа, они задают пропорции каждого флекса. К примеру, если для всех элементов установлено значение 1, то они получатся равного размера. Если какой-то элемент получил значение 2, то его размер будет в два раза больше остальных.


flex: 0 (grow) 1 (shrink) и auto (basis);


grid

контейнер
display: grid;
grid-template-columns: 20% 20% 20% 20% 20%; -- сетка из 5ти элементов по горизонтали
grid-template-rows: 20% 20% 20% 20% 20%; -- сетка из 5 элементов по вертикали


дочерний элементe
grid-column-start: 3; -- сместить элемент на 3-ю колонку
grid-column-end: 4; -- закончить на 4-й -- можно задать отрицательный значения (на подобии slice)

grid-column-end: span 2; -- растянуть на 2 span

grid-column: grid-column-start grid-column-end;
grid-row: grid-row-start grid-row-end;

grid-area: grid-row grid-column;

grid-column: span 3/5 -- то есть закончить выдиления на -5 полоске (границе) и при этом выделить 3 span


grid-area:  1 / 1 / 1 / 1;
grid-area: grid-row-start / grid-column-start / grid-row-end / grid-column-end;

order -- здесь тоже присутсвует

grid-template-columns: repeat(8, 12.5%) -- повторяет ячейки, создавая сетку в 8 по 12.5%

fr -- дробные единицы 
grid-template-columns: 1fr 5fr; -- создает 2 колонки одну размером 1/6 другую 5/6

grid-template-columns: 50px 2fr 2fr 100px; -- создаст колонки 50px слева, 100px справа и 2 колонки по половине свободного пространства

grid-template: grid-template-rows grid-template-columns;


word-wrap(overflow-wrap) -- Слово будет разрываться, если в пределах строки нет подходящей позиции для переноса строки.
word-break -- слова будут разрываться с большим приоритетом (работает даже на флексах)